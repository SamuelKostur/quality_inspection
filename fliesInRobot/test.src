&ACCESS RVP
&REL 9
DEF test()
   decl axis joint_pos_tgt
   decl frame robot_pose_command
   decl int elements_read  

   bas(#initmov, 0)  ; Basic initializasion of axes
   $VEL_AXIS[1] = 1
   $VEL_AXIS[2] = 1
   $VEL_AXIS[3] = 1
   $VEL_AXIS[4] = 1
   $VEL_AXIS[5] = 1
   $VEL_AXIS[6] = 1
   eki_hw_iface_init()
   
   joint_pos_tgt = $axis_act_meas
   ptp joint_pos_tgt

   $advance = 5
   loop      
      WAIT FOR $FLAG[2] 
      elements_read = eki_hw_iface_get(robot_pose_command)  ; Get new command from buffer if present      
      $FLAG[2] = FALSE      
      LIN robot_pose_command VEL=0.3m/s                         ; LIN to most recent commanded position      
      eki_hw_iface_send()                              ; Send measured robot pose to PC
   endloop

end

def eki_hw_iface_init()
   decl eki_status eki_ret
      
   wait sec 0.012          ; Wait for next interpolation cycle

   ; Create and open EKI interface
   eki_ret = eki_init("EkiHwInterface")
   eki_ret = eki_open("EkiHwInterface")
end

deffct int eki_hw_iface_get(robot_pose_command :out)
   decl eki_status eki_ret
   decl frame robot_pose_command

   if not $flag[1] then
      return 0
   endif

   eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/Position/@X")
   if eki_ret.buff <= 0 then
     return 0
   endif

   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Position/@X", robot_pose_command.X)
   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Position/@Y", robot_pose_command.Y)
   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Position/@Z", robot_pose_command.Z)
   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Orientation/@A", robot_pose_command.A)
   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Orientation/@B", robot_pose_command.B)
   eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Orientation/@C", robot_pose_command.C)
   return 1
endfct

def eki_hw_iface_send()
   decl eki_status eki_ret

   if $flag[1] then  ; If connection alive
      ; Load state values into xml structure
      ; Measured cartesian robot pose (Robot TCP in relation to the base coord sys)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Position/@X", $POS_ACT_MES.X)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Position/@Y", $POS_ACT_MES.Y)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Position/@Z", $POS_ACT_MES.Z)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Orientation/@A", $POS_ACT_MES.A)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Orientation/@B", $POS_ACT_MES.B)
      eki_ret = eki_setreal("EkiHwInterface", "RobotState/Orientation/@C", $POS_ACT_MES.C)

      ; Send xml structure
      if $flag[1] then  ; Make sure connection hasn't died while updating xml structure
         eki_ret = eki_send("EkiHwInterface", "RobotState")
      endif
   endif
end